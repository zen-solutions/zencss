//----------------------------------------------------
/* Define variables for gaps, heights, and widths */
//----------------------------------------------------

$gaps: (0.1em, 0.2em, 0.3em, 0.4em, 0.5em, 0.6em);
$heights: (10em, 15em, 20em, 25em, 30em, 40em);
$widths: (4rem, 6rem, 9rem, 12rem, 15rem);

//----------------------------------------------------
/* Generate classes for gaps */
//----------------------------------------------------

@for $i from 1 through length($gaps) {
  .gap-#{$i} {
    gap: nth($gaps, $i);
  }
}

//----------------------------------------------------
/* Generate classes for heights */
//----------------------------------------------------

@for $i from 1 through length($heights) {
  .height-#{$i} {
    height: nth($heights, $i);
  }
}

//----------------------------------------------------
/* Generate classes for widths */
//----------------------------------------------------

@for $i from 1 through length($widths) {
  .width-#{$i} {
    width: nth($widths, $i);
  }
}

//----------------------------------------------
// Directional modifiers
//----------------------------------------------

//BUG
// up 20 should do margin-bottom: 20px; not margin top - 20 for some reason. test this.

.up-5 {
  position: relative;
  margin-bottom: 5px;

}

// Loop through 1 to 5 to generate classes for 10 to 50, incrementing by 10
@for $i from 1 through 5 {
  $value: $i * 10; // Multiply the loop variable by 10 to get the desired values

  // Generating classes for negative margin-top (moving up)
  .up-#{$value} {
    position: relative;
    margin-top: -#{$value}px;
  }

  // Generating classes for positive margin-top (moving down)
  .down-#{$value} {
    position: relative;
    margin-top: #{$value}px;
  }

  // Generating classes for negative margin-left (moving left)
  .left-#{$value} {
    position: relative;
    margin-left: -#{$value}px;
  }

  // Generating classes for positive margin-right (moving right)
  .right-#{$value} {
    position: relative;
    margin-right: #{$value}px;
  }
}

//----------------------------------------------------
/* Width and height */
//----------------------------------------------------

$sizes: (
  10: 10px,
  20: 20px,
  30: 30px,
  40: 40px,
  50: 50px,
  60: 60px,
  75: 75px,
  100:100px,
  150:150px,
  200:200px,
  250:250px,
  300:300px,
  400:400px,
  500:500px,
);

@each $key, $value in $sizes {
  .w-#{$key} {
    width: $value;
  }
  .h-#{$key} {
    height: $value;
  }
}


//----------------------------------------------------
//card//
//----------------------------------------------------

.card {
  //background-color: rgba(255, 255, 255, .2);
  //border: 1px solid #d9d9d9;
  //text-align: center !important;
  //align-items: unset !important;

  h1, h2, h3, h4, h5, h6, p{
    margin: 0;
    border: 0;
  }

  p{
    font-size: .8em;
    margin-top:-3px;
  //  padding-left:15px;
   // margin-left:5px;
   // padding-right:15px;
   // padding-right: 0.2em;
    /* margin-left: 0.2em; */
    //margin-right: 0.2em;
    padding-bottom: .6em;
  }
}

.card>.img {
  margin: 0;
  border: 0;
}


//----------------------------------------------------
// Display values - d-block, d-flex, etc. 
//----------------------------------------------------

$d-values: (
  block: block,
  inline: inline,
  'inline-block': inline-block,
  flex: flex,
  'inline-flex': inline-flex,
  grid: grid,
  'inline-grid': inline-grid,
  table: table,
  'table-row': table-row,
  'table-cell': table-cell,
  none: none
);

@each $name, $value in $d-values {
  .d-#{$name} {
    display: $value;
  }
}




//----------------------------------------------------
//Unset Round
//----------------------------------------------------

.unset-round {
  border-radius: 0;
}


//----------------------------------------------
// Misc Utility classes
//----------------------------------------------

.serif {
  font-family: 'Playfair Display', serif;
}

.row {
  flex-direction: row;
  gap: 1em;
}

.column {
  flex-direction: column;
  gap: 1em;
}

.reverse {
  flex-direction: row-reverse;
}

.unzen {
  display: initial;
  text-align: left;
}

.o-hide {
  overflow: hidden;
}

.vertical-center-flex {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-grow: 1;
}

.vertical-center{
  position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.bg-none{
  background:none; //!?
}

.w-100 {
  width: 100%;
}

.w-sm {
  width: 50px;
  height: auto;
}
